# pylint: disable=line-too-long
#!/usr/bin/env python3
"""
attest_sevsnp.py

Performs a raw attestation request to a SEV-SNP-enabled Azure Attestation instance
using a base64-encoded report and optional runtime data.

Writes the request and response details to a specified output file.

Requirements:
  - Python 3.6+
  - requests

Installation:
  pip install requests

Usage:
  python3 get-sevsnp-jwt.py --jwt-file jwt-file-name.txt
"""

import argparse
import time
import requests

INSTANCE_NAME = "instance.name"
ATTEST_URI = f"https://{INSTANCE_NAME}.attest.azure.net/attest/sevsnpvm?api-version=2022-08-01"
REPORT_SAMPLE = ""
RUNTIME_DATA_SAMPLE = "eyJrZXlzIjpbeyJraWQiOiJIQ0xUcmFuc2ZlcktleSIsImtleV9vcHMiOlsiZW5jcnlwdCJdLCJrdHkiOiJSU0EiLCJlIjoiQVFBQiIsIm4iOiJ1cjA4RGNjakdHelJvM09JcTQ0NW4wMFEzT3RoTUliUjNTV0l6Q2NpY0lNXzduUGlWRjVOQklrbmsyemRIWk4xaWlOaEl6SmV6clhTcVZUN1R5MURsNEFCNXhpQUFxeG83eEdqRnFsTDQ3TkE4V2JaUk14UXR3bHNPalpnRnhvc0ROWEl0NmRNcTdPRGg0bmo2blYySk1TY05mUkt5cjFYRklVSzBYa09XdlZsU2xOWmphQXhqOEg0cFMweU5mTndyMVE5NFZkU24zTFBSdVpCSEU3VnJvZkhSR1NISnJhRGxsZktUMC04b0tXOEVqcE13djFNRV9PZ1BxUHdMeWlSenI5OW1vQjd1eHpqRVZEZTU1RDJpMm1QcmNtVDdrU3NId3A1TzJ4S2hNNjhyZGE2Ri1JVDIxSmdkaFE2bjRIV0NpY3NsQm14NG9xa0kteDVsVnNSa1EifV0sInZtLWNvbmZpZ3VyYXRpb24iOnsic2VjdXJlLWJvb3QiOnRydWUsInNlY3VyZS1ib290LXRlbXBsYXRlLWlkIjoiMTczNGM2ZTgtMzE1NC00ZGRhLWJhNWYtYTg3NGNjNDgzNDIyIiwidHBtLWVuYWJsZWQiOnRydWUsInZtVW5pcXVlSWQiOiJBRTVDQkIyQS1EQzk1LTQ4NzAtQTc0QS1FRTRGQjMzQjFBOUMifX0"
RUNTIME_DATA_TYPE = "JSON"
REQUEST_TIMEOUT_SECONDS = 10


def attest_sevsnp(output_file):
    """Sends a SEV-SNP attestation request and writes the resulting JWT token to the specified file."""
    headers = {
        "Content-Type": "application/json"
    }

    payload = {
        "report": REPORT_SAMPLE,
     #   "runtimeData": {
     #       "data": RUNTIME_DATA_SAMPLE,
     #       "dataType": RUNTIME_DATA_TYPE
     #   }
    }

    print(f"Attestation endpoint: {ATTEST_URI}")
    print(f"Writing token to: {output_file}")

    start_time = time.time()
    response = requests.post(ATTEST_URI, headers=headers, json=payload, timeout=REQUEST_TIMEOUT_SECONDS)
    duration = round(time.time() - start_time, 2)

    print(f"HTTP {response.status_code}: {response.text}")
    if not response.ok:
        print("Attestation request failed.")
        return

    result = response.json()
    token = result.get("token")

    if not token:
        print("No token found in the response.")
        return

    with open(output_file, "w", encoding="utf-8") as f:
        f.write(token)

    print("Attestation completed successfully.")
    print(f"Duration: {duration} seconds")
    print(f"Token successfully written to '{output_file}'.")

def main():
    """Parses command-line arguments and initiates the attestation request."""
    parser = argparse.ArgumentParser(description="Call SEV-SNP attestation and dump JWT.")
    parser.add_argument("--jwt-file", default="jwt.txt", help="Path to write the attestation JWT. Defaults to jwt.txt.")
    args = parser.parse_args()

    attest_sevsnp(args.jwt_file)

if __name__ == "__main__":
    main()
